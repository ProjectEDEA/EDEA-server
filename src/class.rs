// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct File {
    /// 最終更新日時 UnixTime
    #[prost(int32, tag = "1")]
    pub last_modified: i32,
    /// 作成日時 UnixTime
    #[prost(int32, tag = "2")]
    pub created_at: i32,
    /// ファイルの識別子
    #[prost(message, optional, tag = "3")]
    pub file_id: ::core::option::Option<FileId>,
    /// ファイル名
    #[prost(string, tag = "4")]
    pub name: ::prost::alloc::string::String,
    /// クラスのリスト
    #[prost(message, repeated, tag = "5")]
    pub classes: ::prost::alloc::vec::Vec<Class>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FileId {
    /// File ID
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Result {
    /// 真偽値
    #[prost(bool, tag = "1")]
    pub value: bool,
    /// メッセージ
    #[prost(string, optional, tag = "2")]
    pub message: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Class {
    /// クラスの識別子
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    /// 親クラスやインターフェースなどとの関係
    ///
    /// 関係のリスト
    #[prost(message, optional, tag = "3")]
    pub relations: ::core::option::Option<RelationInfoList>,
    /// クラスの属性とメソッド
    #[prost(message, repeated, tag = "4")]
    pub attributes: ::prost::alloc::vec::Vec<Variable>,
    #[prost(message, repeated, tag = "5")]
    pub methods: ::prost::alloc::vec::Vec<Method>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Method {
    #[prost(enumeration = "Visibility", tag = "1")]
    pub visibility: i32,
    /// 抽象メソッド
    #[prost(bool, optional, tag = "2")]
    pub is_abstract: ::core::option::Option<bool>,
    /// static メソッド
    #[prost(bool, optional, tag = "3")]
    pub is_static: ::core::option::Option<bool>,
    #[prost(string, tag = "4")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub return_type: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "6")]
    pub parameters: ::prost::alloc::vec::Vec<Variable>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Variable {
    #[prost(enumeration = "Visibility", optional, tag = "1")]
    pub visibility: ::core::option::Option<i32>,
    /// static フィールド
    #[prost(bool, optional, tag = "2")]
    pub is_static: ::core::option::Option<bool>,
    #[prost(string, tag = "3")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub r#type: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RelationInfoList {
    /// 関係のリスト
    #[prost(message, repeated, tag = "1")]
    pub relation_infos: ::prost::alloc::vec::Vec<RelationInfo>,
}
/// クラス間の1：1の関係を表わす
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RelationInfo {
    #[prost(string, tag = "1")]
    pub target_class_id: ::prost::alloc::string::String,
    #[prost(enumeration = "Relation", tag = "2")]
    pub relation: i32,
    /// 親側の多重度
    #[prost(message, optional, tag = "3")]
    pub multiplicity_p: ::core::option::Option<Multiplicity>,
    /// 子側の多重度
    #[prost(message, optional, tag = "4")]
    pub multiplicity_c: ::core::option::Option<Multiplicity>,
    /// 親側のロール名
    #[prost(string, optional, tag = "5")]
    pub role_name_p: ::core::option::Option<::prost::alloc::string::String>,
    /// 子側のロール名
    #[prost(string, optional, tag = "6")]
    pub role_name_c: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Multiplicity {
    #[prost(uint32, tag = "1")]
    pub lower: u32,
    #[prost(uint32, optional, tag = "2")]
    pub upper: ::core::option::Option<u32>,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Relation {
    None = 0,
    Inheritance = 1,
    Implementation = 2,
    Association = 3,
    Aggregation = 4,
    Composition = 5,
}
impl Relation {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "NONE",
            Self::Inheritance => "INHERITANCE",
            Self::Implementation => "IMPLEMENTATION",
            Self::Association => "ASSOCIATION",
            Self::Aggregation => "AGGREGATION",
            Self::Composition => "COMPOSITION",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "NONE" => Some(Self::None),
            "INHERITANCE" => Some(Self::Inheritance),
            "IMPLEMENTATION" => Some(Self::Implementation),
            "ASSOCIATION" => Some(Self::Association),
            "AGGREGATION" => Some(Self::Aggregation),
            "COMPOSITION" => Some(Self::Composition),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Visibility {
    NonModifier = 0,
    Public = 1,
    Private = 2,
    Protected = 3,
}
impl Visibility {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::NonModifier => "NON_MODIFIER",
            Self::Public => "PUBLIC",
            Self::Private => "PRIVATE",
            Self::Protected => "PROTECTED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "NON_MODIFIER" => Some(Self::NonModifier),
            "PUBLIC" => Some(Self::Public),
            "PRIVATE" => Some(Self::Private),
            "PROTECTED" => Some(Self::Protected),
            _ => None,
        }
    }
}
/// Generated server implementations.
pub mod diagram_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with DiagramServiceServer.
    #[async_trait]
    pub trait DiagramService: std::marker::Send + std::marker::Sync + 'static {
        async fn save_class_diagram(
            &self,
            request: tonic::Request<super::File>,
        ) -> std::result::Result<tonic::Response<super::Result>, tonic::Status>;
        async fn get_class_diagram(
            &self,
            request: tonic::Request<super::FileId>,
        ) -> std::result::Result<tonic::Response<super::File>, tonic::Status>;
        async fn is_existing_class_diagram(
            &self,
            request: tonic::Request<super::FileId>,
        ) -> std::result::Result<tonic::Response<super::Result>, tonic::Status>;
        async fn delete_class_diagram(
            &self,
            request: tonic::Request<super::FileId>,
        ) -> std::result::Result<tonic::Response<super::Result>, tonic::Status>;
    }
    #[derive(Debug)]
    pub struct DiagramServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> DiagramServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for DiagramServiceServer<T>
    where
        T: DiagramService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/class.DiagramService/SaveClassDiagram" => {
                    #[allow(non_camel_case_types)]
                    struct SaveClassDiagramSvc<T: DiagramService>(pub Arc<T>);
                    impl<T: DiagramService> tonic::server::UnaryService<super::File>
                    for SaveClassDiagramSvc<T> {
                        type Response = super::Result;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::File>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as DiagramService>::save_class_diagram(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SaveClassDiagramSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/class.DiagramService/GetClassDiagram" => {
                    #[allow(non_camel_case_types)]
                    struct GetClassDiagramSvc<T: DiagramService>(pub Arc<T>);
                    impl<T: DiagramService> tonic::server::UnaryService<super::FileId>
                    for GetClassDiagramSvc<T> {
                        type Response = super::File;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FileId>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as DiagramService>::get_class_diagram(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetClassDiagramSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/class.DiagramService/IsExistingClassDiagram" => {
                    #[allow(non_camel_case_types)]
                    struct IsExistingClassDiagramSvc<T: DiagramService>(pub Arc<T>);
                    impl<T: DiagramService> tonic::server::UnaryService<super::FileId>
                    for IsExistingClassDiagramSvc<T> {
                        type Response = super::Result;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FileId>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as DiagramService>::is_existing_class_diagram(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = IsExistingClassDiagramSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/class.DiagramService/DeleteClassDiagram" => {
                    #[allow(non_camel_case_types)]
                    struct DeleteClassDiagramSvc<T: DiagramService>(pub Arc<T>);
                    impl<T: DiagramService> tonic::server::UnaryService<super::FileId>
                    for DeleteClassDiagramSvc<T> {
                        type Response = super::Result;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FileId>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as DiagramService>::delete_class_diagram(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DeleteClassDiagramSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for DiagramServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "class.DiagramService";
    impl<T> tonic::server::NamedService for DiagramServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
